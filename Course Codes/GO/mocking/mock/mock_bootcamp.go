// Code generated by MockGen. DO NOT EDIT.
// Source: interface/bootcamp.go

// Package mock_iface is a generated GoMock package.
package mock_iface

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMyIntegerInterface is a mock of MyIntegerInterface interface.
type MockMyIntegerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMyIntegerInterfaceMockRecorder
}

// MockMyIntegerInterfaceMockRecorder is the mock recorder for MockMyIntegerInterface.
type MockMyIntegerInterfaceMockRecorder struct {
	mock *MockMyIntegerInterface
}

// NewMockMyIntegerInterface creates a new mock instance.
func NewMockMyIntegerInterface(ctrl *gomock.Controller) *MockMyIntegerInterface {
	mock := &MockMyIntegerInterface{ctrl: ctrl}
	mock.recorder = &MockMyIntegerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMyIntegerInterface) EXPECT() *MockMyIntegerInterfaceMockRecorder {
	return m.recorder
}

// MyInteger mocks base method.
func (m *MockMyIntegerInterface) MyInteger(arg0 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MyInteger", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// MyInteger indicates an expected call of MyInteger.
func (mr *MockMyIntegerInterfaceMockRecorder) MyInteger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MyInteger", reflect.TypeOf((*MockMyIntegerInterface)(nil).MyInteger), arg0)
}
